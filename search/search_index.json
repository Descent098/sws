{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the sws documentation! what is sws? sws is a utility I wrote with the intention of implementing some common web scripts into one cohesive library. it is primarily intended to be used as a standalone script, but it can also be used as an API. Installation From PyPi run pip install sws or sudo pip3 install sws . From source Clone the github repo ( https://github.com/Descent098/sws ) cd into the 'sws' root directory (where setup.py is) and run pip install . or sudo pip3 install . You can validate it is installed properly by typing sws into your terminal, the output should look like this: Kieran's Useful Web Scripts; A set of python web utility scripts. Usage: sws [-h] [-v] sws redirects <url> [-t] sws youtube <url> [<path>] sws ssl <hostname> [-e] [-c] Options: -h --help Show this help message and exit -v --version Show program's version number and exit -e --expiry If specified will check the expiry of ssl cert/domain -c --cert If specified will print the full details of the SSL cert -t --trace If specified will show the full trace of the provided url","title":"Home"},{"location":"#welcome-to-the-sws-documentation","text":"","title":"Welcome to the sws documentation!"},{"location":"#what-is-sws","text":"sws is a utility I wrote with the intention of implementing some common web scripts into one cohesive library. it is primarily intended to be used as a standalone script, but it can also be used as an API.","title":"what is sws?"},{"location":"#installation","text":"","title":"Installation"},{"location":"#from-pypi","text":"run pip install sws or sudo pip3 install sws .","title":"From PyPi"},{"location":"#from-source","text":"Clone the github repo ( https://github.com/Descent098/sws ) cd into the 'sws' root directory (where setup.py is) and run pip install . or sudo pip3 install . You can validate it is installed properly by typing sws into your terminal, the output should look like this: Kieran's Useful Web Scripts; A set of python web utility scripts. Usage: sws [-h] [-v] sws redirects <url> [-t] sws youtube <url> [<path>] sws ssl <hostname> [-e] [-c] Options: -h --help Show this help message and exit -v --version Show program's version number and exit -e --expiry If specified will check the expiry of ssl cert/domain -c --cert If specified will print the full details of the SSL cert -t --trace If specified will show the full trace of the provided url","title":"From source"},{"location":"contribution-guide/","text":"Contribution Guide If you are interested in contributing to sws (thanks by the way) then this guide should give you all you need to get started. There will be info about sws ' structure, guiding principles, code style information, and more. Code style Here is everything you need to know about writing code that matches the style of the existing codebase. Variable names There is really only 1 rule for variable names: DO NOT INCLUDE SINGLE CHARACTER VARIABLE NAMES! This makes things so much more difficult to debug that it often ends up being better to just re-implement, keep things short, simple, readable and idiomatic. Linting Currently there is no strict linting enforced, but be reasonable. PEP-8 is a good source to follow, but not required. In the future something like black or flake8 may be implemented, but not yet. In-Line Documentation At a minimum your code must include docstrings for any functions, and inline code for any module global variables (though these should be avoided anyway). The typical format followed is the numpystyle docstrings with at least the attributes, methods, examples, returns/yields and notes sections (where applicable) for both classes and functions. Ideally you should also include an in-line comment if you are doing any nested iteration, conditionals, or combinations of both, that just quickly explains what's going on. Guiding principles Here are some of the principles that sws is built on, before submitting a pull request make sure your feature is in line with them (you can also submit an issue to ask before writing it). Goals Provide an easy to use cli that saves you writing bash scripts every time you want to do common tasks. Provide an extensible API that can be implemented in other projects. Also take a look at the what is sws? section of the homepage. Bug Tracking & Roadmap The bug tracking and overall roadmap can be found in the project page on github . If you are looking to submit a bug report, feature request, or pull request please go through the github issues page . Source File/Folder Structure Here is the layout and functions for all the files/folders in the project. I have split it up between functionality, testing/documentation, and Metadata/Manifest files. Functionality All the code that comprises sws' functionality is found in /sws and in the following files: /sws/command_line_utility.py Includes the code for the sws command. /sws/utilities The files in this folder include all the primary logic used by the sws command. Testing & Documentation These files comprise the testing suite (implemented in pytest ) and the documentation source files (implemented with mkdocs ). /tests This folder contains all the testing files, currently there is only one primary_test.py which runs a slough of functionality tests. /docs Includes all the source documentation files for this website (written in markdown and built to HTML using mkdocs ). CHANGELOG.md A chronological list of changes made in various versions of sws, along with their respective public release dates. README.md A file used by github to give a bit of a blurb about using sws for those who don't want to read the real documentation (good on you by the way). Metadata/Manifest files These are files for doing various maintenance tasks, and storing configurations for different development utilities. .gitignore This file is used to specify which files should not include LICENSE This file contains the licensing information about the project, which in this case is MIT . noxfile.py Used to configure various automated processes using nox , these include: Building release distributions Releasing distributions on PyPi Running test suite against a number of python versions (3.5-current) If anything to do with deployment or releases is failing, this is likely the suspect. setup.py Manifest information for defining sws as a python package. Includes metadata about the package such as version number, the CLI entrypoint, specification of standard installation (and development installation) dependencies, and other metadata required by PyPi. If you need to modify how python installs sws, this is the file to start with. /sws/__init__.py & /sws/utilities/__init__.py This file is used by python to define the /sws & /sws/utilities folder as a python package. You should never need to modify it.","title":"Contribution Guide"},{"location":"contribution-guide/#contribution-guide","text":"If you are interested in contributing to sws (thanks by the way) then this guide should give you all you need to get started. There will be info about sws ' structure, guiding principles, code style information, and more.","title":"Contribution Guide"},{"location":"contribution-guide/#code-style","text":"Here is everything you need to know about writing code that matches the style of the existing codebase.","title":"Code style"},{"location":"contribution-guide/#variable-names","text":"There is really only 1 rule for variable names: DO NOT INCLUDE SINGLE CHARACTER VARIABLE NAMES! This makes things so much more difficult to debug that it often ends up being better to just re-implement, keep things short, simple, readable and idiomatic.","title":"Variable names"},{"location":"contribution-guide/#linting","text":"Currently there is no strict linting enforced, but be reasonable. PEP-8 is a good source to follow, but not required. In the future something like black or flake8 may be implemented, but not yet.","title":"Linting"},{"location":"contribution-guide/#in-line-documentation","text":"At a minimum your code must include docstrings for any functions, and inline code for any module global variables (though these should be avoided anyway). The typical format followed is the numpystyle docstrings with at least the attributes, methods, examples, returns/yields and notes sections (where applicable) for both classes and functions. Ideally you should also include an in-line comment if you are doing any nested iteration, conditionals, or combinations of both, that just quickly explains what's going on.","title":"In-Line Documentation"},{"location":"contribution-guide/#guiding-principles","text":"Here are some of the principles that sws is built on, before submitting a pull request make sure your feature is in line with them (you can also submit an issue to ask before writing it).","title":"Guiding principles"},{"location":"contribution-guide/#goals","text":"Provide an easy to use cli that saves you writing bash scripts every time you want to do common tasks. Provide an extensible API that can be implemented in other projects. Also take a look at the what is sws? section of the homepage.","title":"Goals"},{"location":"contribution-guide/#bug-tracking-roadmap","text":"The bug tracking and overall roadmap can be found in the project page on github . If you are looking to submit a bug report, feature request, or pull request please go through the github issues page .","title":"Bug Tracking &amp; Roadmap"},{"location":"contribution-guide/#source-filefolder-structure","text":"Here is the layout and functions for all the files/folders in the project. I have split it up between functionality, testing/documentation, and Metadata/Manifest files.","title":"Source File/Folder Structure"},{"location":"contribution-guide/#functionality","text":"All the code that comprises sws' functionality is found in /sws and in the following files:","title":"Functionality"},{"location":"contribution-guide/#swscommand_line_utilitypy","text":"Includes the code for the sws command.","title":"/sws/command_line_utility.py"},{"location":"contribution-guide/#swsutilities","text":"The files in this folder include all the primary logic used by the sws command.","title":"/sws/utilities"},{"location":"contribution-guide/#testing-documentation","text":"These files comprise the testing suite (implemented in pytest ) and the documentation source files (implemented with mkdocs ).","title":"Testing &amp; Documentation"},{"location":"contribution-guide/#tests","text":"This folder contains all the testing files, currently there is only one primary_test.py which runs a slough of functionality tests.","title":"/tests"},{"location":"contribution-guide/#docs","text":"Includes all the source documentation files for this website (written in markdown and built to HTML using mkdocs ).","title":"/docs"},{"location":"contribution-guide/#changelogmd","text":"A chronological list of changes made in various versions of sws, along with their respective public release dates.","title":"CHANGELOG.md"},{"location":"contribution-guide/#readmemd","text":"A file used by github to give a bit of a blurb about using sws for those who don't want to read the real documentation (good on you by the way).","title":"README.md"},{"location":"contribution-guide/#metadatamanifest-files","text":"These are files for doing various maintenance tasks, and storing configurations for different development utilities.","title":"Metadata/Manifest files"},{"location":"contribution-guide/#gitignore","text":"This file is used to specify which files should not include","title":".gitignore"},{"location":"contribution-guide/#license","text":"This file contains the licensing information about the project, which in this case is MIT .","title":"LICENSE"},{"location":"contribution-guide/#noxfilepy","text":"Used to configure various automated processes using nox , these include: Building release distributions Releasing distributions on PyPi Running test suite against a number of python versions (3.5-current) If anything to do with deployment or releases is failing, this is likely the suspect.","title":"noxfile.py"},{"location":"contribution-guide/#setuppy","text":"Manifest information for defining sws as a python package. Includes metadata about the package such as version number, the CLI entrypoint, specification of standard installation (and development installation) dependencies, and other metadata required by PyPi. If you need to modify how python installs sws, this is the file to start with.","title":"setup.py"},{"location":"contribution-guide/#sws9595init9595py-swsutilities9595init9595py","text":"This file is used by python to define the /sws & /sws/utilities folder as a python package. You should never need to modify it.","title":"/sws/__init__.py &amp; /sws/utilities/__init__.py"},{"location":"quick-start/","text":"Quick Start Here is everything you need to get started with sws. Script usage Super Web Scripts; A command line interface, and set of scripts for web tasks. Usage: sws [-h] [-v] sws redirects <url> [-t] sws youtube <url> [<path>] sws ssl <hostname> [-e] [-c] Options: -h --help Show this help message and exit -v --version Show program's version number and exit -e --expiry If specified will check the expiry of ssl cert/domain -c --cert If specified will print the full details of the SSL cert -t --trace If specified will show the full trace of the provided url Commands redirects Can be used to gather information about http redirects. -t or --trace : When specified will print the train of redirects from the initial url provided. youtube Used to download YouTube videos. \\<url> : The YouTube video URL; NOTE: this must be in full form with protocol i.e. https://www.youtube.com/watch?v=6j1I3mC0BR0 \\<path> : A path to download the YouTube video to (by default it's in the same directory you run the command from). ssl Used to gather information about a host's SSL certificate (such as expiry etc). \\<hostname> : specify the FQDN to pull information about (URL without the protocol) i.e. kieranwood.ca -e or --expiry : Prints the date and time the SSL cert will expire. -c or --cert : Prints the full set of available information about the cert (commonName, notBefore etc.). API usage If you are looking to use sws as an API, first install it. Once installed you can build API docs by installing pdoc3 ( pip install pdoc3 or sudo pip3 install pdoc3 ), and then running pdoc sws --http localhost:8080 . Go to a browser and type in http://localhost:8080/sws/utilities/","title":"Quick Start"},{"location":"quick-start/#quick-start","text":"Here is everything you need to get started with sws.","title":"Quick Start"},{"location":"quick-start/#script-usage","text":"Super Web Scripts; A command line interface, and set of scripts for web tasks. Usage: sws [-h] [-v] sws redirects <url> [-t] sws youtube <url> [<path>] sws ssl <hostname> [-e] [-c] Options: -h --help Show this help message and exit -v --version Show program's version number and exit -e --expiry If specified will check the expiry of ssl cert/domain -c --cert If specified will print the full details of the SSL cert -t --trace If specified will show the full trace of the provided url","title":"Script usage"},{"location":"quick-start/#commands","text":"","title":"Commands"},{"location":"quick-start/#redirects","text":"Can be used to gather information about http redirects. -t or --trace : When specified will print the train of redirects from the initial url provided.","title":"redirects"},{"location":"quick-start/#youtube","text":"Used to download YouTube videos. \\<url> : The YouTube video URL; NOTE: this must be in full form with protocol i.e. https://www.youtube.com/watch?v=6j1I3mC0BR0 \\<path> : A path to download the YouTube video to (by default it's in the same directory you run the command from).","title":"youtube"},{"location":"quick-start/#ssl","text":"Used to gather information about a host's SSL certificate (such as expiry etc). \\<hostname> : specify the FQDN to pull information about (URL without the protocol) i.e. kieranwood.ca -e or --expiry : Prints the date and time the SSL cert will expire. -c or --cert : Prints the full set of available information about the cert (commonName, notBefore etc.).","title":"ssl"},{"location":"quick-start/#api-usage","text":"If you are looking to use sws as an API, first install it. Once installed you can build API docs by installing pdoc3 ( pip install pdoc3 or sudo pip3 install pdoc3 ), and then running pdoc sws --http localhost:8080 . Go to a browser and type in http://localhost:8080/sws/utilities/","title":"API usage"}]}